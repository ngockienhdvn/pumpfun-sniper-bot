import logging
import asyncio
import requests
from telethon import TelegramClient, events
from solana.rpc.api import Client
from solana.transaction import Transaction
from solana.keypair import Keypair
from solana.publickey import PublicKey
from solana.rpc.types import TxOpts
from base64 import b64decode
import json
import os

# ƒê·ªçc c√°c bi·∫øn m√¥i tr∆∞·ªùng
api_id = int(os.environ["API_ID"])
api_hash = os.environ["API_HASH"]
bot_token = os.environ["BOT_TOKEN"]

# Kh·ªüi t·∫°o Telegram bot client
bot = TelegramClient('bot_session', api_id, api_hash).start(bot_token=bot_token)

# T·∫°o n∆°i l∆∞u th√¥ng tin ng∆∞·ªùi d√πng
USER_STATE = {}

# K·∫øt n·ªëi RPC Solana
solana = Client("https://api.mainnet-beta.solana.com")

# L·∫•y danh s√°ch token m·ªõi tr√™n Pump.fun
def get_new_tokens():
    try:
        res = requests.get("https://client-api.pump.fun/all-tokens").json()
        sorted_tokens = sorted(res, key=lambda x: x['launchedAt'], reverse=True)
        return sorted_tokens[:1]  # ch·ªâ l·∫•y 1 token m·ªõi nh·∫•t
    except Exception as e:
        return []

# G·ª≠i SOL ƒë·ªÉ mua token
def buy_token(token_address, keypair: Keypair, amount_sol: float):
    try:
        # G·ª≠i native SOL ƒë·∫øn ƒë·ªãa ch·ªâ token -> Pump s·∫Ω t·ª± x·ª≠ l√Ω giao d·ªãch
        tx = Transaction()
        tx.add(
            solana.request_airdrop(
                PublicKey(token_address), int(amount_sol * 10**9)
            )["result"]
        )
        response = solana.send_transaction(tx, keypair, opts=TxOpts(skip_confirmation=False))
        return f"ƒê√£ mua token: {token_address}\nTX: {response['result']}"
    except Exception as e:
        return f"‚ùå L·ªói khi mua token: {e}"

# H√†m x·ª≠ l√Ω l·ªánh /start
@bot.on(events.NewMessage(pattern="/start"))
async def start(event):
    await event.respond("ü§ñ Xin ch√†o! G√µ /nhap ƒë·ªÉ b·∫Øt ƒë·∫ßu c·∫•u h√¨nh v√≠ v√† s·ªë l∆∞·ª£ng mua.")
    raise events.StopPropagation

# Nh·∫≠p private key v√† s·ªë l∆∞·ª£ng SOL
@bot.on(events.NewMessage(pattern="/nhap"))
async def handle_nhap(event):
    USER_STATE[event.chat_id] = {'step': 'awaiting_key'}
    await event.respond("üõ°Ô∏è Vui l√≤ng g·ª≠i PRIVATE KEY v√≠ Solana c·ªßa b·∫°n:")
    raise events.StopPropagation

@bot.on(events.NewMessage)
async def handle_message(event):
    user = USER_STATE.get(event.chat_id)

    if not user:
        return

    if user.get("step") == "awaiting_key":
        try:
            key = event.raw_text.strip()
            if key.startswith('['):  # d·∫°ng array
                key_bytes = bytes(json.loads(key))
            else:  # d·∫°ng base58 (t·∫°m kh√¥ng d√πng)
                await event.respond("‚ùå Ch·ªâ h·ªó tr·ª£ private key d·∫°ng m·∫£ng JSON.")
                return
            kp = Keypair.from_secret_key(key_bytes)
            USER_STATE[event.chat_id]["keypair"] = kp
            USER_STATE[event.chat_id]["step"] = "awaiting_amount"
            await event.respond("‚úÖ Nh·∫≠p s·ªë SOL mu·ªën d√πng cho m·ªói l·∫ßn mua (VD: 0.1):")
        except Exception as e:
            await event.respond(f"‚ùå Private key kh√¥ng h·ª£p l·ªá: {e}")

    elif user.get("step") == "awaiting_amount":
        try:
            amount = float(event.raw_text.strip())
            if 0.01 <= amount <= 1:
                USER_STATE[event.chat_id]["amount"] = amount
                USER_STATE[event.chat_id]["step"] = "ready"
                await event.respond("‚úÖ C·∫•u h√¨nh ho√†n t·∫•t! Bot s·∫Ω b·∫Øt ƒë·∫ßu theo d√µi token m·ªõi...")
                asyncio.create_task(sniper(event.chat_id))  # ch·∫°y ng·∫ßm
            else:
                await event.respond("‚ùå Nh·∫≠p s·ªë t·ª´ 0.01 ƒë·∫øn 1 SOL.")
        except:
            await event.respond("‚ùå S·ªë kh√¥ng h·ª£p l·ªá.")

# Theo d√µi v√† mua token
async def sniper(chat_id):
    bought = set()
    while True:
        tokens = get_new_tokens()
        for token in tokens:
            addr = token["tokenAddress"]
            if addr not in bought:
                bought.add(addr)
                keypair = USER_STATE[chat_id]["keypair"]
                amount = USER_STATE[chat_id]["amount"]
                result = buy_token(addr, keypair, amount)
                await bot.send_message(chat_id, result)
        await asyncio.sleep(5)

# Kh·ªüi ch·∫°y bot
def main():
    logging.basicConfig(level=logging.INFO)
    bot.run_until_disconnected()

if __name__ == "__main__":
    main()
