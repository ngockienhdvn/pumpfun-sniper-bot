import logging
import asyncio
import requests
from telethon import TelegramClient, events
from solana.rpc.api import Client
from solana.transaction import Transaction
from solana.keypair import Keypair
from solana.publickey import PublicKey
from solana.rpc.types import TxOpts
import json
import os

# ƒê·ªçc c√°c bi·∫øn m√¥i tr∆∞·ªùng
api_id = int(os.environ["API_ID"])
api_hash = os.environ["API_HASH"]
bot_token = os.environ["BOT_TOKEN"]

# Kh·ªüi t·∫°o Telegram bot client
bot = TelegramClient('bot_session', api_id, api_hash).start(bot_token=bot_token)

# L∆∞u tr·∫°ng th√°i ng∆∞·ªùi d√πng
USER_STATE = {}

# K·∫øt n·ªëi Solana RPC
solana = Client("https://api.mainnet-beta.solana.com")

# L·∫•y token m·ªõi nh·∫•t t·ª´ Pump.fun
def get_new_tokens():
    try:
        res = requests.get("https://client-api.pump.fun/all-tokens").json()
        sorted_tokens = sorted(res, key=lambda x: x['launchedAt'], reverse=True)
        return sorted_tokens[:1]  # l·∫•y token m·ªõi nh·∫•t
    except:
        return []

# Mua token b·∫±ng c√°ch g·ª≠i SOL
def buy_token(token_address, keypair: Keypair, amount_sol: float):
    try:
        dest = PublicKey(token_address)
        tx = Transaction()
        tx.add(
            solana.request_airdrop(dest, int(amount_sol * 1e9))["result"]
        )
        response = solana.send_transaction(tx, keypair, opts=TxOpts(skip_confirmation=False))
        return f"‚úÖ ƒê√£ g·ª≠i {amount_sol} SOL ƒë·∫øn token {token_address}\nTX: {response['result']}"
    except Exception as e:
        return f"‚ùå L·ªói khi g·ª≠i SOL ƒë·∫øn token {token_address}:\n{e}"

# /start
@bot.on(events.NewMessage(pattern="/start"))
async def start(event):
    await event.respond("ü§ñ Xin ch√†o! G√µ /nhap ƒë·ªÉ nh·∫≠p v√≠ Solana v√† s·ªë l∆∞·ª£ng mua.")
    raise events.StopPropagation

# /nhap
@bot.on(events.NewMessage(pattern="/nhap"))
async def nhap(event):
    USER_STATE[event.chat_id] = {'step': 'await_key'}
    await event.respond("üõ°Ô∏è G·ª≠i PRIVATE KEY v√≠ Solana c·ªßa b·∫°n (d·∫°ng m·∫£ng s·ªë):")
    raise events.StopPropagation

# X·ª≠ l√Ω tin nh·∫Øn ti·∫øp theo
@bot.on(events.NewMessage)
async def handle(event):
    user = USER_STATE.get(event.chat_id)
    if not user:
        return

    if user["step"] == "await_key":
        try:
            key_bytes = bytes(json.loads(event.raw_text.strip()))
            keypair = Keypair.from_secret_key(key_bytes)
            USER_STATE[event.chat_id]["keypair"] = keypair
            USER_STATE[event.chat_id]["step"] = "await_amount"
            await event.respond("üí∞ Nh·∫≠p s·ªë l∆∞·ª£ng SOL mu·ªën mua m·ªói l·∫ßn (VD: 0.1):")
        except Exception as e:
            await event.respond(f"‚ùå L·ªói private key: {e}")
    elif user["step"] == "await_amount":
        try:
            amount = float(event.raw_text.strip())
            if not 0.01 <= amount <= 1:
                await event.respond("‚ùå Vui l√≤ng nh·∫≠p t·ª´ 0.01 ƒë·∫øn 1 SOL.")
                return
            USER_STATE[event.chat_id]["amount"] = amount
            USER_STATE[event.chat_id]["step"] = "done"
            await event.respond(f"‚úÖ C·∫•u h√¨nh ho√†n t·∫•t!\nBot s·∫Ω t·ª± ƒë·ªông mua token m·ªõi tr√™n pump.fun b·∫±ng {amount} SOL.")
            asyncio.create_task(sniper(event.chat_id))
        except:
            await event.respond("‚ùå Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá.")

# Theo d√µi v√† mua
async def sniper(chat_id):
    bought = set()
    while True:
        tokens = get_new_tokens()
        for token in tokens:
            token_addr = token["tokenAddress"]
            if token_addr in bought:
                continue
            bought.add(token_addr)
            keypair = USER_STATE[chat_id]["keypair"]
            amount = USER_STATE[chat_id]["amount"]
            result = buy_token(token_addr, keypair, amount)
            await bot.send_message(chat_id, result)
        await asyncio.sleep(5)

# Kh·ªüi ch·∫°y
def main():
    logging.basicConfig(level=logging.INFO)
    bot.run_until_disconnected()

if __name__ == "__main__":
    main()
